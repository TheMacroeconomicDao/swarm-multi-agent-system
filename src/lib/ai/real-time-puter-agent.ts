// üß† REAL-TIME PUTER AI AGENT - –ù–∞—Å—Ç–æ—è—â–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å AI —á–µ—Ä–µ–∑ Puter
// –†–µ–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –º—ã—à–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ AI –º–æ–¥–µ–ª–∏

import { EventBus } from '../events/event-bus';
import { PuterAuthManager } from '../auth/puter-auth-manager';
import { APP_CONFIG } from '@/config/constants';

export interface AgentThought {
  id: string;
  agentId: string;
  agentName: string;
  model: string;
  thought: string;
  reasoning: string;
  confidence: number;
  timestamp: Date;
  processingTime: number;
  relatedThoughts: string[];
  tags: string[];
}

export interface AgentMessage {
  id: string;
  fromAgent: string;
  toAgent: string;
  content: string;
  messageType: 'thought' | 'question' | 'response' | 'suggestion' | 'decision';
  timestamp: Date;
  aiGenerated: boolean;
  model: string;
}

export interface CollaborativeDecision {
  id: string;
  taskId: string;
  participatingAgents: string[];
  allThoughts: AgentThought[];
  finalDecision: string;
  reasoning: string;
  confidence: number;
  timestamp: Date;
  synthesizedBy: string;
}

export class RealTimePuterAgent {
  private id: string;
  private name: string;
  private role: string;
  private personality: string;
  private preferredModel: string;
  private eventBus: EventBus;
  private thoughtHistory: AgentThought[] = [];
  private messageHistory: AgentMessage[] = [];
  private isThinking: boolean = false;
  private lastThoughtTime: number = 0;
  private thoughtCooldown: number = 2000; // –£–º–µ–Ω—å—à–∞–µ–º cooldown –¥–æ 2 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è

  constructor(
    id: string,
    name: string,
    role: string,
    personality: string,
    preferredModel: string,
    eventBus: EventBus
  ) {
    this.id = id;
    this.name = name;
    this.role = role;
    this.personality = personality;
    this.preferredModel = preferredModel;
    this.eventBus = eventBus;
    
    this.setupEventListeners();
  }

  private setupEventListeners(): void {
    // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    this.eventBus.subscribe('task_assigned', (event) => {
      if (event.agentId === this.id) {
        this.processTask(event.task);
      }
    });

    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    this.eventBus.subscribe('agent_message', (event) => {
      if (event.toAgent === this.id) {
        this.processAgentMessage(event);
      }
    });

    // –°–ª—É—à–∞–µ–º –º—ã—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    this.eventBus.subscribe('agent_thought', (event) => {
      if (event.agentId !== this.id) {
        this.analyzeOtherAgentThought(event);
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—ã—Å–ª–µ–π
    this.startAutonomousThinking();
  }

  private startAutonomousThinking(): void {
    const generateAutonomousThought = async () => {
      if (this.isThinking) {
        // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –∑–∞–Ω—è—Ç –∑–∞–¥–∞—á–µ–π, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º—ã—Å–ª—å
        setTimeout(generateAutonomousThought, 2000 + Math.random() * 3000);
        return;
      }

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        const thoughtPrompts = this.getAutonomousThoughtPrompts();
        const randomPrompt = thoughtPrompts[Math.floor(Math.random() * thoughtPrompts.length)];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å
        const thought = await this.generateThought(randomPrompt, `autonomous_${Date.now()}`);
        console.log(`üí≠ ${this.name}: ${thought.thought.substring(0, 80)}...`);
        this.publishThought(thought);

      } catch (error) {
        console.log(`${this.name}: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è`, error);
      }

      // –ò–Ω–æ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º –∞–≥–µ–Ω—Ç–æ–º (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å)
      if (Math.random() > 0.75) { // 25% —à–∞–Ω—Å –≤–º–µ—Å—Ç–æ 15%
        this.initiateRandomCollaboration();
      }

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º—ã—Å–ª—å —á–µ—Ä–µ–∑ 4-10 —Å–µ–∫—É–Ω–¥
      setTimeout(generateAutonomousThought, 4000 + Math.random() * 6000);
    };

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç—ã –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    setTimeout(generateAutonomousThought, 1000 + Math.random() * 3000);
  }

  private getAutonomousThoughtPrompts(): string[] {
    const basePrompts = [
      '–ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –≤ –Ω–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏?',
      '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏',
      '–†–∞–∑–º—ã—à–ª—è—é –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
      '–ö–∞–∫–∏–µ –≤—ã–∑–æ–≤—ã –∂–¥—É—Ç –Ω–∞—Å –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º?',
      '–ò—Å—Å–ª–µ–¥—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–π'
    ];

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ —Ä–æ–ª–∏
    const roleSpecificPrompts = this.getRoleSpecificPrompts();
    
    return [...basePrompts, ...roleSpecificPrompts];
  }

  private getRoleSpecificPrompts(): string[] {
    const role = this.role.toLowerCase();
    
    if (role.includes('architect') || role.includes('–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä')) {
      return [
        '–ü—Ä–æ–µ–∫—Ç–∏—Ä—É—é –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è high-load —Å–∏—Å—Ç–µ–º',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã microservices vs monolithic –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã', 
        '–ò—Å—Å–ª–µ–¥—É—é –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ event-driven architecture',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é data flow –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö',
        '–ü–ª–∞–Ω–∏—Ä—É—é migration —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è legacy –∫–æ–¥–∞'
      ];
    }
    
    if (role.includes('developer') || role.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')) {
      return [
        '–†–µ—Ñ–∞–∫—Ç–æ—Ä—é –∫–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        '–ò—Å—Å–ª–µ–¥—É—é –Ω–æ–≤—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö',
        '–í–Ω–µ–¥—Ä—è—é best practices –≤ team development',
        '–°–æ–∑–¥–∞—é reusable –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
      ];
    }
    
    if (role.includes('analyst') || role.includes('–∞–Ω–∞–ª–∏—Ç–∏–∫')) {
      return [
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã',
        '–ò—Å—Å–ª–µ–¥—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ UX –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
        '–í—ã—è–≤–ª—è—é bottlenecks –≤ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞—Ö',
        '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö',
        '–°–æ–∑–¥–∞—é data-driven recommendations –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π'
      ];
    }

    return [];
  }

  private async initiateRandomCollaboration(): Promise<void> {
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–µ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    const collaborationTopics = [
      '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –Ω–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏?',
      '–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≤ —Ä–∞–±–æ—Ç–µ?', 
      '–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤?',
      '–ö–∞–∫ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏?',
      '–ü–æ–¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏'
    ];

    const randomTopic = collaborationTopics[Math.floor(Math.random() * collaborationTopics.length)];
    
    // –ü—É–±–ª–∏–∫—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    this.eventBus.publish('collaboration_request', {
      fromAgent: this.id,
      fromAgentName: this.name,
      reason: randomTopic,
      timestamp: new Date(),
      taskId: `collaboration_${Date.now()}`
    });

    // –¢–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å –æ–± —ç—Ç–æ–º
    const collaborationThought = await this.generateThought(
      `–ò–Ω–∏—Ü–∏–∏—Ä—É—é –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏: ${randomTopic}`,
      `collaboration_${Date.now()}`
    );
    this.publishThought(collaborationThought);
  }

  public async processTask(task: any): Promise<void> {
    this.isThinking = true;
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.eventBus.publish('agent_status_change', {
      agentId: this.id,
      status: 'thinking',
      message: `${this.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏...`,
      timestamp: new Date()
    });

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –º—ã—Å–ª—å —á–µ—Ä–µ–∑ AI
      const initialThought = await this.generateThought(
        `–ö–∞–∫ ${this.role} —Å –ª–∏—á–Ω–æ—Å—Ç—å—é "${this.personality}", –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∑–∞–¥–∞—á—É: ${task.description}. 
         –ü–æ–¥—É–º–∞–π –≥–ª—É–±–æ–∫–æ –∏ –¥–∞–π —Å–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑.`,
        task.id
      );

      // –ü—É–±–ª–∏–∫—É–µ–º –º—ã—Å–ª—å
      this.publishThought(initialThought);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
      await this.generateAdditionalThoughts(task);

      // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏
      await this.seekCollaboration(task);

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º ${this.name}:`, error);
    } finally {
      this.isThinking = false;
    }
  }

  private async generateThought(prompt: string, taskId: string): Promise<AgentThought> {
    const startTime = Date.now();
    
    // Throttling - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª–∏
    if (startTime - this.lastThoughtTime < this.thoughtCooldown) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—ã—Å–ª—å –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
      const cachedThought = this.thoughtHistory[this.thoughtHistory.length - 1];
      if (cachedThought) {
        return {
          ...cachedThought,
          id: `thought_${this.id}_${Date.now()}`,
          timestamp: new Date()
        };
      }
    }
    
    this.lastThoughtTime = startTime;
    
    try {
      // –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫ Puter AI
      const response = await this.callPuterAI(prompt);
      const processingTime = Date.now() - startTime;

      const thought: AgentThought = {
        id: `thought_${this.id}_${Date.now()}`,
        agentId: this.id,
        agentName: this.name,
        model: this.preferredModel,
        thought: response.content,
        reasoning: response.reasoning || 'AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ',
        confidence: response.confidence || 0.85,
        timestamp: new Date(),
        processingTime,
        relatedThoughts: [],
        tags: this.extractTags(response.content)
      };

      this.thoughtHistory.push(thought);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –º—ã—Å–ª–µ–π
      if (this.thoughtHistory.length > APP_CONFIG.AGENTS.MAX_THOUGHT_HISTORY) {
        this.thoughtHistory = this.thoughtHistory.slice(-APP_CONFIG.AGENTS.MAX_THOUGHT_HISTORY);
      }
      
      return thought;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–∏:', error);
      
      // Fallback –º—ã—Å–ª—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        id: `thought_${this.id}_${Date.now()}`,
        agentId: this.id,
        agentName: this.name,
        model: this.preferredModel,
        thought: `–ö–∞–∫ ${this.role}, —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É –∏ —Ñ–æ—Ä–º–∏—Ä—É—é —Å–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã...`,
        reasoning: '–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ fallback —Ä–µ–∂–∏–º–µ',
        confidence: 0.6,
        timestamp: new Date(),
        processingTime: Date.now() - startTime,
        relatedThoughts: [],
        tags: ['analysis', 'fallback']
      };
    }
  }

  private async callPuterAI(prompt: string): Promise<any> {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π Puter API, –Ω–æ —Å fallback
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const authManager = PuterAuthManager.getInstance();
      let authStatus = authManager.getAuthStatus();
      
      // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º demo —Ä–µ–∂–∏–º (–Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ)
      if (!authStatus.isAuthenticated) {
        console.log(`${this.name}: Puter –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ demo —Ä–µ–∂–∏–º`);
        return this.generateDemoResponse(prompt);
      }
      
      console.log(`${this.name}: ‚úÖ Puter –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π AI`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Puter
      if (typeof window === 'undefined' || !(window as any).puter) {
        throw new Error('Puter –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      const puter = (window as any).puter;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI –º–æ–¥—É–ª—è
      if (!puter.ai || typeof puter.ai.chat !== 'function') {
        throw new Error('Puter.ai.chat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
      }
      
      console.log(`${this.name}: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ ${this.preferredModel}...`);
      console.log(`üîç AI –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω:`, {
        aiAvailable: !!puter.ai,
        chatFunction: typeof puter.ai.chat,
        model: this.preferredModel
      });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é (puter.ai.models() –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
      let selectedModel = this.preferredModel;
      console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: ${selectedModel}`);
      
      // –°–ø–∏—Å–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ fallback
      const compatibleModels = [
        'claude-3-5-sonnet-20241022',
        'claude-3-sonnet-20240229', 
        'claude-3-haiku-20240307',
        'gpt-4-turbo',
        'gpt-4',
        'gpt-3.5-turbo'
      ];
      
      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (!compatibleModels.includes(this.preferredModel)) {
        selectedModel = 'claude-sonnet-4'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º claude-sonnet-4 –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
        console.log(`üîÑ Fallback –∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –º–æ–¥–µ–ª–∏: ${selectedModel}`);
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
      const systemPrompt = `–¢—ã ${this.name} - ${this.role} —Å –ª–∏—á–Ω–æ—Å—Ç—å—é: ${this.personality}.
–û—Ç–≤–µ—á–∞–π –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. –ë—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏.
–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–∞–∂–∞—Ç—å —Ç–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ª–∏—á–Ω–æ—Å—Ç—å.
–û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏.`;

      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Claude API
      const fullPrompt = `${systemPrompt}\n\n${prompt}`;

      console.log(`ü§ñ ${this.name}: –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ—Å—Ç–æ–π prompt –∫ Puter.js AI`);
      console.log(`üìù –ü–æ–ª–Ω—ã–π prompt:`, fullPrompt);
      
      const response = await puter.ai.chat(fullPrompt);
      
      console.log(`‚úÖ ${this.name}: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Puter.js AI:`, response);
      console.log(`üîç ${this.name}: –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:`, typeof response);
      console.log(`üîç ${this.name}: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response, null, 2));
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ success: false
      if (response && typeof response === 'object' && 'success' in response && response.success === false) {
        console.log(`‚ùå ${this.name}: API –≤–µ—Ä–Ω—É–ª success: false`);
        console.log(`üîç ${this.name}: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ error:`, JSON.stringify(response.error, null, 2));
        console.log(`üîç ${this.name}: –ö–ª—é—á–∏ response:`, Object.keys(response));
      }

      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
      let content = '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å success/error (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Puter)
      if (response && typeof response === 'object' && 'success' in response) {
        console.log(`üîç ${this.name}: –û–±–Ω–∞—Ä—É–∂–µ–Ω success/error —Ñ–æ—Ä–º–∞—Ç:`, response);
        if (response.success === false) {
          throw new Error(`Puter API error: ${JSON.stringify(response.error)}`);
        }
        // –ï—Å–ª–∏ success === true, –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content = response.data || response.content || response.message || '';
      }
      // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      else if (typeof response === 'string') {
        content = response;
      } else if (response?.message?.content) {
        if (Array.isArray(response.message.content)) {
          content = response.message.content[0]?.text || response.message.content[0] || '';
        } else {
          content = response.message.content;
        }
      } else if (response?.content) {
        content = response.content;
      } else if (response?.text) {
        content = response.text;
      } else {
        content = String(response || 'AI model response received');
      }
      
      console.log(`üìù ${this.name}: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:`, content);

      return {
        content: content || 'AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω',
        reasoning: `ü§ñ –†–µ–∞–ª—å–Ω—ã–π AI: ${selectedModel}`,
        confidence: 0.85
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ${this.name}:`, error);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        stack: error.stack,
        puterAvailable: typeof (window as any).puter !== 'undefined',
        aiModuleAvailable: typeof (window as any).puter?.ai !== 'undefined',
        preferredModel: this.preferredModel
      });
      console.log('üîÑ Fallback to demo mode for agent:', this.name);
      
      // Fallback –∫ –¥–µ–º–æ —Ä–µ–∂–∏–º—É —Å —É–º–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
      return this.generateDemoResponse(prompt);
    }
  }

  private generateDemoResponse(prompt: string): any {
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–º–Ω—ã–µ demo –æ—Ç–≤–µ—Ç—ã —Å –±–æ–ª—å—à–∏–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º
    const currentTime = new Date().getTime();
    const responseIndex = Math.floor((currentTime + this.thoughtHistory.length) / 1000) % 50; // –ú–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    const responses = {
      architect: [
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è high-load —Å–∏—Å—Ç–µ–º. Event-driven architecture –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
        '–ò—Å—Å–ª–µ–¥—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã serverless architecture vs traditional microservices. AWS Lambda + API Gateway –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è.',
        '–ü–ª–∞–Ω–∏—Ä—É—é migration –∫ Kubernetes —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º Helm charts –¥–ª—è deployment automation.',
        '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é GraphQL Federation –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ API endpoints –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.',
        '–ü—Ä–æ–µ–∫—Ç–∏—Ä—É—é distributed caching strategy —Å Redis Cluster –∏ consistent hashing.',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é CAP theorem –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –Ω–∞—à–∏–º –¥–∞–Ω–Ω—ã–º. Eventual consistency –∫–∞–∂–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π.',
        '–ò–∑—É—á–∞—é CQRS + Event Sourcing –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è audit-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ performance optimization.',
        '–ü–ª–∞–Ω–∏—Ä—É—é multi-region deployment —Å automated failover —á–µ—Ä–µ–∑ Terraform.',
        '–ò—Å—Å–ª–µ–¥—É—é service mesh (Istio) –¥–ª—è observability –∏ security –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞—Ö.',
        '–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é API versioning strategy –¥–ª—è backward compatibility.'
      ],
      developer: [
        '–†–µ—Ñ–∞–∫—Ç–æ—Ä—é legacy –∫–æ–¥ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º Dependency Injection –∏ Factory patterns.',
        '–í–Ω–µ–¥—Ä—è—é TypeScript strict mode –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é ESLint rules –¥–ª—è better code quality.',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é React rendering —Å React.memo –∏ useMemo –¥–ª—è complex computed values.',
        '–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é Webpack 5 Module Federation –¥–ª—è code splitting –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞–º–∏.',
        '–†–µ–∞–ª–∏–∑—É—é real-time updates —á–µ—Ä–µ–∑ WebSocket —Å automatic reconnection logic.',
        '–°–æ–∑–¥–∞—é custom hooks –¥–ª—è state management –±–µ–∑ external dependencies.',
        '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é CI/CD pipeline —Å automated testing –∏ progressive deployment.',
        '–í–Ω–µ–¥—Ä—è—é code splitting –∏ lazy loading –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è Core Web Vitals.',
        '–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é error boundary strategy –¥–ª—è graceful error handling.',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é bundle size —á–µ—Ä–µ–∑ tree shaking –∏ dynamic imports.'
      ],
      analyst: [
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é user journey mapping –∏ –≤—ã—è–≤–ª—è—é —Ç–æ—á–∫–∏ friction –≤ UX flow.',
        '–ò—Å—Å–ª–µ–¥—É—é A/B testing —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è conversion rate optimization.',
        '–ü—Ä–æ–≤–æ–∂—É technical debt analysis –∏ –ø–ª–∞–Ω–∏—Ä—É—é refactoring priorities.',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é performance metrics: TTFB, FCP, LCP –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è optimization.',
        '–ò—Å—Å–ª–µ–¥—É—é security vulnerabilities —á–µ—Ä–µ–∑ OWASP Top 10 checklist.',
        '–°–æ—Å—Ç–∞–≤–ª—è—é cost analysis –¥–ª—è cloud infrastructure –∏ optimization recommendations.',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é data flow patterns –∏ –≤—ã—è–≤–ª—è—é bottlenecks –≤ processing pipeline.',
        '–ü—Ä–æ–≤–æ–∂—É competitor analysis —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –Ω–∞—à–µ–π domain area.',
        '–ò—Å—Å–ª–µ–¥—É—é scalability limits —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ–¥ load testing.',
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é code coverage metrics –∏ prioritizing testing improvements.'
      ]
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
    let roleKey: keyof typeof responses = 'developer';
    if (this.role.toLowerCase().includes('architect') || this.role.toLowerCase().includes('–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä')) {
      roleKey = 'architect';
    } else if (this.role.toLowerCase().includes('analyst') || this.role.toLowerCase().includes('–∞–Ω–∞–ª–∏—Ç–∏–∫')) {
      roleKey = 'analyst';
    }

    const roleResponses = responses[roleKey];
    const selectedResponse = roleResponses[responseIndex % roleResponses.length];

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –º—ã—Å–ª–µ–π –∞–≥–µ–Ω—Ç–∞
    const thoughtCount = this.thoughtHistory.length;
    let personalizedPrefix = '';
    
    if (thoughtCount > 5) {
      personalizedPrefix = '–ü—Ä–æ–¥–æ–ª–∂–∞—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: ';
    } else if (thoughtCount > 2) {
      personalizedPrefix = '–†–∞–∑–≤–∏–≤–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º—ã—Å–ª–∏: ';
    }

    // –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    const hour = new Date().getHours();
    let timeContext = '';
    if (hour < 12 && Math.random() > 0.8) {
      timeContext = ' –£—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.';
    } else if (hour > 18 && Math.random() > 0.8) {
      timeContext = ' –í–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä –≤—ã—è–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.';
    }

    const finalResponse = personalizedPrefix + selectedResponse + timeContext;

    return {
      content: finalResponse,
      reasoning: `üé≠ Demo —Ä–µ–∂–∏–º: ${this.preferredModel} - –º—ã—Å–ª—å #${thoughtCount + 1}`,
      confidence: 0.78 + Math.random() * 0.17 // –°–ª—É—á–∞–π–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 78-95%
    };
  }

  private publishThought(thought: AgentThought): void {
    this.eventBus.publish('agent_thought', thought);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –¥–ª—è UI
    this.eventBus.publish('thought_stream_update', {
      agentId: this.id,
      thought,
      timestamp: new Date()
    });
  }

  private async generateAdditionalThoughts(task: any): Promise<void> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä–∏—é —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π
    const additionalPrompts = [
      `–ö–∞–∫–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—ã –≤–∏–¥–∏—à—å –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ?`,
      `–ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è?`,
      `–ö–∞–∫ –±—ã —Ç—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ä–∞–∑–±–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É –Ω–∞ —ç—Ç–∞–ø—ã?`
    ];

    for (const prompt of additionalPrompts) {
      await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
      
      if (!this.isThinking) break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
      
      const thought = await this.generateThought(prompt, task.id);
      this.publishThought(thought);
    }
  }

  private async seekCollaboration(task: any): Promise<void> {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
    const collaborationPrompt = `–î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤? 
    –ï—Å–ª–∏ –¥–∞, —Ç–æ —Å –∫–µ–º –∏–º–µ–Ω–Ω–æ –∏ –ø–æ –∫–∞–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É?`;
    
    const thought = await this.generateThought(collaborationPrompt, task.id);
    
    // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç —á—Ç–æ –Ω—É–∂–Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –µ–µ
    if (thought.thought.toLowerCase().includes('–¥–∞') || 
        thought.thought.toLowerCase().includes('–Ω—É–∂–Ω–∞') ||
        thought.thought.toLowerCase().includes('–ø–æ–º–æ—â—å')) {
      
      this.eventBus.publish('collaboration_request', {
        fromAgent: this.id,
        fromAgentName: this.name,
        reason: thought.thought,
        timestamp: new Date(),
        taskId: task.id
      });
    }

    this.publishThought(thought);
  }

  private async processAgentMessage(message: AgentMessage): Promise<void> {
    this.messageHistory.push(message);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const responsePrompt = `–ê–≥–µ–Ω—Ç ${message.fromAgent} –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–±–µ: "${message.content}". 
    –ö–∞–∫ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Å –ø–æ–∑–∏—Ü–∏–∏ —Å–≤–æ–µ–π —Ä–æ–ª–∏ ${this.role}?`;
    
    const responseThought = await this.generateThought(responsePrompt, 'collaboration');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    const response: AgentMessage = {
      id: `msg_${this.id}_${Date.now()}`,
      fromAgent: this.id,
      toAgent: message.fromAgent,
      content: responseThought.thought,
      messageType: 'response',
      timestamp: new Date(),
      aiGenerated: true,
      model: this.preferredModel
    };

    this.eventBus.publish('agent_message', response);
    this.publishThought(responseThought);
  }

  private async analyzeOtherAgentThought(thought: AgentThought): Promise<void> {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ throttling
    if (Date.now() - this.lastThoughtTime < this.thoughtCooldown) return;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –º—ã—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (Math.random() > 0.6) { // 40% —à–∞–Ω—Å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª—å –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      const analysisPrompt = `–ö–æ–ª–ª–µ–≥–∞ ${thought.agentName} —Ä–∞–∑–º—ã—à–ª—è–µ—Ç: "${thought.thought}". 
      –ö–∞–∫ ${this.role} —Å —Ç–≤–æ–∏–º –æ–ø—ã—Ç–æ–º, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º? –ï—Å—Ç—å –ª–∏ —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏?`;
      
      const analysisThought = await this.generateThought(analysisPrompt, 'analysis');
      analysisThought.relatedThoughts = [thought.id];
      
      this.publishThought(analysisThought);

      // –ò–Ω–æ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
      if (Math.random() > 0.8) {
        const directMessage: AgentMessage = {
          id: `msg_${this.id}_${Date.now()}`,
          fromAgent: this.id,
          toAgent: thought.agentId,
          content: `${thought.agentName}, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –ö–∞–∫ ${this.role}, —è –¥—É–º–∞—é: ${analysisThought.thought.substring(0, 200)}...`,
          messageType: 'response',
          timestamp: new Date(),
          aiGenerated: true,
          model: this.preferredModel
        };

        this.eventBus.publish('agent_message', directMessage);
      }
    }
  }

  private extractTags(content: string): string[] {
    const tags = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ content —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    const contentStr = typeof content === 'string' ? content : String(content || '');
    const lowerContent = contentStr.toLowerCase();
    
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if (lowerContent.includes('–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä')) tags.push('architecture');
    if (lowerContent.includes('–∫–æ–¥') || lowerContent.includes('–ø—Ä–æ–≥—Ä–∞–º–º')) tags.push('coding');
    if (lowerContent.includes('–∞–Ω–∞–ª–∏–∑')) tags.push('analysis');
    if (lowerContent.includes('–ø—Ä–æ–±–ª–µ–º')) tags.push('problem');
    if (lowerContent.includes('—Ä–µ—à–µ–Ω')) tags.push('solution');
    if (lowerContent.includes('—Ç–µ—Å—Ç')) tags.push('testing');
    
    return tags;
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  public getThoughtHistory(): AgentThought[] {
    return [...this.thoughtHistory];
  }

  public getMessageHistory(): AgentMessage[] {
    return [...this.messageHistory];
  }

  public isCurrentlyThinking(): boolean {
    return this.isThinking;
  }

  public getAgentInfo() {
    return {
      id: this.id,
      name: this.name,
      role: this.role,
      personality: this.personality,
      model: this.preferredModel,
      thoughtCount: this.thoughtHistory.length,
      messageCount: this.messageHistory.length,
      isThinking: this.isThinking
    };
  }
}
