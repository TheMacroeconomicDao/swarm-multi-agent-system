// üß† COLLECTIVE INTELLIGENCE ENGINE - –î–≤–∏–∂–æ–∫ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
// –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ —Å–∏–Ω—Ç–µ–∑ –º—ã—Å–ª–µ–π –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ –µ–¥–∏–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

import { EventBus } from '../events/event-bus';
import { AgentThought, AgentMessage, CollaborativeDecision } from './real-time-puter-agent';

export interface TaskAnalysis {
  taskId: string;
  taskDescription: string;
  participatingAgents: string[];
  allThoughts: AgentThought[];
  allMessages: AgentMessage[];
  collaborativeDecisions: CollaborativeDecision[];
  finalSolution: string;
  confidenceScore: number;
  createdAt: Date;
  completedAt?: Date;
  status: 'analyzing' | 'collaborating' | 'synthesizing' | 'completed';
}

export interface SynthesisStep {
  id: string;
  stepNumber: number;
  description: string;
  involvedThoughts: string[];
  result: string;
  confidence: number;
  timestamp: Date;
}

export class CollectiveIntelligenceEngine {
  private eventBus: EventBus;
  private activeAnalyses: Map<string, TaskAnalysis> = new Map();
  private thoughtBuffer: Map<string, AgentThought[]> = new Map();
  private messageBuffer: Map<string, AgentMessage[]> = new Map();

  constructor(eventBus: EventBus) {
    this.eventBus = eventBus;
    this.setupEventListeners();
  }

  private setupEventListeners(): void {
    // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    this.eventBus.subscribe('task_created', (data: any) => {
      this.initializeTaskAnalysis(data.taskId, data.description);
    });

    // –°–ª—É—à–∞–µ–º –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤
    this.eventBus.subscribe('agent_thought', (thought: AgentThought) => {
      this.processAgentThought(thought);
    });

    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    this.eventBus.subscribe('agent_message', (message: AgentMessage) => {
      this.processAgentMessage(message);
    });

    // –°–ª—É—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é
    this.eventBus.subscribe('collaboration_request', (data: any) => {
      this.facilitateCollaboration(data);
    });
  }

  private initializeTaskAnalysis(taskId: string, description: string): void {
    const analysis: TaskAnalysis = {
      taskId,
      taskDescription: description,
      participatingAgents: [],
      allThoughts: [],
      allMessages: [],
      collaborativeDecisions: [],
      finalSolution: '',
      confidenceScore: 0,
      createdAt: new Date(),
      status: 'analyzing'
    };

    this.activeAnalyses.set(taskId, analysis);
    this.thoughtBuffer.set(taskId, []);
    this.messageBuffer.set(taskId, []);

    // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    this.eventBus.publish('collective_analysis_started', {
      taskId,
      analysis,
      timestamp: new Date()
    });
  }

  private processAgentThought(thought: AgentThought): void {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º—ã—Å–ª—å
    const taskId = this.findTaskForThought(thought);
    if (!taskId) return;

    const analysis = this.activeAnalyses.get(taskId);
    if (!analysis) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –º—ã—Å–ª—å –∫ –∞–Ω–∞–ª–∏–∑—É
    analysis.allThoughts.push(thought);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!analysis.participatingAgents.includes(thought.agentId)) {
      analysis.participatingAgents.push(thought.agentId);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const buffer = this.thoughtBuffer.get(taskId) || [];
    buffer.push(thought);
    this.thoughtBuffer.set(taskId, buffer);

    // –ü—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    this.eventBus.publish('collective_thought_added', {
      taskId,
      thought,
      totalThoughts: analysis.allThoughts.length,
      timestamp: new Date()
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.checkForSynthesis(taskId);
  }

  private processAgentMessage(message: AgentMessage): void {
    const taskId = this.findTaskForMessage(message);
    if (!taskId) return;

    const analysis = this.activeAnalyses.get(taskId);
    if (!analysis) return;

    analysis.allMessages.push(message);

    const buffer = this.messageBuffer.get(taskId) || [];
    buffer.push(message);
    this.messageBuffer.set(taskId, buffer);

    // –ü—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    this.eventBus.publish('collective_message_added', {
      taskId,
      message,
      totalMessages: analysis.allMessages.length,
      timestamp: new Date()
    });
  }

  private async facilitateCollaboration(event: any): Promise<void> {
    // –ù–∞—Ö–æ–¥–∏–º –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å
    const relevantAgents = this.findRelevantAgents(event.reason);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é
    for (const agentId of relevantAgents) {
      if (agentId !== event.fromAgent) {
        this.eventBus.publish('agent_message', {
          id: `collab_${Date.now()}`,
          fromAgent: 'collective_intelligence',
          toAgent: agentId,
          content: `–ê–≥–µ–Ω—Ç ${event.fromAgentName} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é: ${event.reason}. –ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å?`,
          messageType: 'question',
          timestamp: new Date(),
          aiGenerated: false,
          model: 'system'
        });
      }
    }

    // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏
    this.eventBus.publish('collaboration_facilitated', {
      initiator: event.fromAgent,
      participants: relevantAgents,
      reason: event.reason,
      timestamp: new Date()
    });
  }

  private async checkForSynthesis(taskId: string): Promise<void> {
    const analysis = this.activeAnalyses.get(taskId);
    if (!analysis) return;

    const thoughts = this.thoughtBuffer.get(taskId) || [];
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ç–µ–∑–∞:
    // 1. –ë–æ–ª–µ–µ 3 –º—ã—Å–ª–µ–π –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    // 2. –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
    // 3. –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    
    const uniqueAgents = new Set(thoughts.map(t => t.agentId)).size;
    const timeSinceStart = Date.now() - analysis.createdAt.getTime();
    
    if (uniqueAgents >= 2 && thoughts.length >= 3 && timeSinceStart > 10000) {
      await this.synthesizeCollectiveDecision(taskId);
    }
  }

  private async synthesizeCollectiveDecision(taskId: string): Promise<void> {
    const analysis = this.activeAnalyses.get(taskId);
    if (!analysis || analysis.status === 'synthesizing') return;

    analysis.status = 'synthesizing';

    // –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞—á–∞–ª–æ —Å–∏–Ω—Ç–µ–∑–∞
    this.eventBus.publish('synthesis_started', {
      taskId,
      thoughtCount: analysis.allThoughts.length,
      agentCount: analysis.participatingAgents.length,
      timestamp: new Date()
    });

    try {
      // –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø—ã —Å–∏–Ω—Ç–µ–∑–∞
      const synthesisSteps = await this.createSynthesisSteps(analysis);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ç–µ–∑ –ø–æ —ç—Ç–∞–ø–∞–º
      for (const step of synthesisSteps) {
        await this.executeSynthesisStep(step, taskId);
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
      const finalSolution = await this.generateFinalSolution(analysis);
      analysis.finalSolution = finalSolution.content;
      analysis.confidenceScore = finalSolution.confidence;
      analysis.status = 'completed';
      analysis.completedAt = new Date();

      // –ü—É–±–ª–∏–∫—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      this.eventBus.publish('collective_decision_completed', {
        taskId,
        solution: finalSolution,
        analysis,
        timestamp: new Date()
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è:', error);
      
      // –ü—É–±–ª–∏–∫—É–µ–º –æ—à–∏–±–∫—É
      this.eventBus.publish('synthesis_error', {
        taskId,
        error: error.message,
        timestamp: new Date()
      });
    }
  }

  private async createSynthesisSteps(analysis: TaskAnalysis): Promise<SynthesisStep[]> {
    const steps: SynthesisStep[] = [];

    // –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º—ã—Å–ª–µ–π
    steps.push({
      id: `step_1_${analysis.taskId}`,
      stepNumber: 1,
      description: '–ê–Ω–∞–ª–∏–∑ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º—ã—Å–ª–µ–π –∞–≥–µ–Ω—Ç–æ–≤',
      involvedThoughts: analysis.allThoughts.map(t => t.id),
      result: await this.analyzeAllThoughts(analysis.allThoughts),
      confidence: 0.8,
      timestamp: new Date()
    });

    // –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    steps.push({
      id: `step_2_${analysis.taskId}`,
      stepNumber: 2,
      description: '–ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ —Å–æ–≥–ª–∞—Å–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏',
      involvedThoughts: analysis.allThoughts.map(t => t.id),
      result: await this.findConsensus(analysis.allThoughts),
      confidence: 0.75,
      timestamp: new Date()
    });

    // –≠—Ç–∞–ø 3: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    steps.push({
      id: `step_3_${analysis.taskId}`,
      stepNumber: 3,
      description: '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –º–Ω–µ–Ω–∏–π',
      involvedThoughts: analysis.allThoughts.filter(t => t.confidence < 0.7).map(t => t.id),
      result: await this.resolveConflicts(analysis.allThoughts),
      confidence: 0.7,
      timestamp: new Date()
    });

    return steps;
  }

  private async executeSynthesisStep(step: SynthesisStep, taskId: string): Promise<void> {
    // –ü—É–±–ª–∏–∫—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
    this.eventBus.publish('synthesis_step_executed', {
      taskId,
      step,
      timestamp: new Date()
    });
  }

  private async analyzeAllThoughts(thoughts: AgentThought[]): Promise<string> {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º—ã—Å–ª–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
    const categories = this.categorizeThoughts(thoughts);
    const summary = Object.entries(categories)
      .map(([category, categoryThoughts]) => 
        `${category}: ${categoryThoughts.length} –º—ã—Å–ª–µ–π`)
      .join(', ');
    
    return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${thoughts.length} –º—ã—Å–ª–µ–π –æ—Ç ${new Set(thoughts.map(t => t.agentId)).size} –∞–≥–µ–Ω—Ç–æ–≤. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${summary}`;
  }

  private async findConsensus(thoughts: AgentThought[]): Promise<string> {
    // –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ —Ç–µ–º—ã –∏ —Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
    const commonThemes = this.extractCommonThemes(thoughts);
    return `–ù–∞–π–¥–µ–Ω—ã –æ–±—â–∏–µ —Ç–µ–º—ã: ${commonThemes.join(', ')}. –ê–≥–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Ä–µ—à–µ–Ω–∏—è.`;
  }

  private async resolveConflicts(thoughts: AgentThought[]): Promise<string> {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
    const conflicts = this.identifyConflicts(thoughts);
    return `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${conflicts.length} –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.`;
  }

  private async generateFinalSolution(analysis: TaskAnalysis): Promise<{content: string, confidence: number}> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    const thoughtsSummary = analysis.allThoughts
      .map(t => `${t.agentName}: ${t.thought}`)
      .join('\n');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
      const solution = await this.callPuterForSynthesis(analysis.taskDescription, thoughtsSummary);
      return {
        content: solution,
        confidence: 0.9
      };
    } catch (error) {
      // Fallback —Ä–µ—à–µ–Ω–∏–µ
      return {
        content: `–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ${analysis.allThoughts.length} –º—ã—Å–ª–µ–π –æ—Ç ${analysis.participatingAgents.length} –∞–≥–µ–Ω—Ç–æ–≤: ${this.createFallbackSolution(analysis)}`,
        confidence: 0.7
      };
    }
  }

  private async callPuterForSynthesis(taskDescription: string, thoughtsSummary: string): Promise<string> {
    if (typeof window === 'undefined' || !(window as any).puter) {
      throw new Error('Puter –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const puter = (window as any).puter;
    
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏ –º—ã—Å–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:

–ó–ê–î–ê–ß–ê: ${taskDescription}

–ú–´–°–õ–ò –≠–ö–°–ü–ï–†–¢–û–í:
${thoughtsSummary}

–°–æ–∑–¥–∞–π —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ –∏–¥–µ–∏ –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.`;

    try {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Puter.js
      const systemPrompt = '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∏–Ω—Ç–µ–∑—É –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –°–æ–∑–¥–∞–≤–∞–π —á–µ—Ç–∫–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.';
      const fullPrompt = `${systemPrompt}\n\n${prompt}`;
      
        const response = await puter.ai.chat(fullPrompt);

      console.log('üîç Collective Intelligence response:', response);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      if (typeof response === 'string') {
        return response;
      } else if (response?.message?.content) {
        if (Array.isArray(response.message.content)) {
          return response.message.content[0]?.text || response.message.content[0] || '';
        } else {
          return response.message.content;
        }
      } else {
        return response?.content || '–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ';
      }
    } catch (error) {
      throw error;
    }
  }

  private categorizeThoughts(thoughts: AgentThought[]): Record<string, AgentThought[]> {
    const categories: Record<string, AgentThought[]> = {};
    
    for (const thought of thoughts) {
      for (const tag of thought.tags) {
        if (!categories[tag]) categories[tag] = [];
        categories[tag].push(thought);
      }
    }
    
    return categories;
  }

  private extractCommonThemes(thoughts: AgentThought[]): string[] {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö —Ç–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywords = thoughts
      .flatMap(t => t.thought.split(' '))
      .filter(word => word.length > 3)
      .reduce((acc, word) => {
        acc[word] = (acc[word] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);

    return Object.entries(keywords)
      .filter(([_, count]) => count >= 2)
      .map(([word, _]) => word)
      .slice(0, 5);
  }

  private identifyConflicts(thoughts: AgentThought[]): any[] {
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    return thoughts.filter(t => t.confidence < 0.7);
  }

  private createFallbackSolution(analysis: TaskAnalysis): string {
    return `–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —É—á–∏—Ç—ã–≤–∞—é—â–∏–π –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–¥–µ–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–Ω–µ–Ω–∏—è ${analysis.participatingAgents.length} –∞–≥–µ–Ω—Ç–æ–≤.`;
  }

  private findTaskForThought(thought: AgentThought): string | null {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - —Å–≤—è–∑—ã–≤–∞–µ–º —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–µ–π
    for (const [taskId, analysis] of this.activeAnalyses) {
      if (analysis.status !== 'completed') {
        return taskId;
      }
    }
    return null;
  }

  private findTaskForMessage(message: AgentMessage): string | null {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    for (const [taskId, analysis] of this.activeAnalyses) {
      if (analysis.status !== 'completed') {
        return taskId;
      }
    }
    return null;
  }

  private findRelevantAgents(reason: string): string[] {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    const allAgents = ['ai-architect-agent', 'ai-developer-agent', 'ai-analyst-agent'];
    return allAgents.slice(0, 2); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  public getActiveAnalyses(): TaskAnalysis[] {
    return Array.from(this.activeAnalyses.values());
  }

  public getAnalysis(taskId: string): TaskAnalysis | undefined {
    return this.activeAnalyses.get(taskId);
  }
}
