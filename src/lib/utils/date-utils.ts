// üìÖ DATE UTILITIES - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
// Utility functions for safe date/time formatting

import { DEFAULTS } from '@/config/constants';

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
 */
export function safeFormatTime(timestamp: Date | string | number | undefined): string {
  try {
    if (!timestamp) {
      return new Date().toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    }

    let date: Date;
    
    if (timestamp instanceof Date) {
      date = timestamp;
    } else if (typeof timestamp === 'string' || typeof timestamp === 'number') {
      date = new Date(timestamp);
    } else {
      date = new Date();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
    if (isNaN(date.getTime())) {
      date = new Date();
    }

    return date.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

  } catch (error) {
    console.warn('Error formatting time:', error);
    return new Date().toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
 */
export function safeFormatDate(timestamp: Date | string | number | undefined): string {
  try {
    if (!timestamp) {
      return new Date().toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit', 
        year: 'numeric'
      });
    }

    let date: Date;
    
    if (timestamp instanceof Date) {
      date = timestamp;
    } else {
      date = new Date(timestamp);
    }

    if (isNaN(date.getTime())) {
      date = new Date();
    }

    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });

  } catch (error) {
    console.warn('Error formatting date:', error);
    return new Date().toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
export function safeFormatDateTime(timestamp: Date | string | number | undefined): string {
  return `${safeFormatDate(timestamp)} ${safeFormatTime(timestamp)}`;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É "–≤—Ä–µ–º—è –Ω–∞–∑–∞–¥"
 */
export function getRelativeTime(timestamp: Date | string | number | undefined): string {
  try {
    if (!timestamp) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';

    let date: Date;
    
    if (timestamp instanceof Date) {
      date = timestamp;
    } else {
      date = new Date(timestamp);
    }

    if (isNaN(date.getTime())) {
      return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    }

    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffSeconds = Math.floor(diffMs / 1000);
    const diffMinutes = Math.floor(diffSeconds / 60);
    const diffHours = Math.floor(diffMinutes / 60);
    const diffDays = Math.floor(diffHours / 24);

    if (diffSeconds < 60) {
      return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (diffMinutes < 60) {
      return `${diffMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else if (diffHours < 24) {
      return `${diffHours} —á. –Ω–∞–∑–∞–¥`;
    } else if (diffDays < 7) {
      return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    } else {
      return safeFormatDate(timestamp);
    }

  } catch (error) {
    console.warn('Error calculating relative time:', error);
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å timestamp
 */
export function isValidTimestamp(timestamp: any): boolean {
  if (!timestamp) return false;
  
  try {
    const date = new Date(timestamp);
    return !isNaN(date.getTime());
  } catch {
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π timestamp
 */
export function createSafeTimestamp(): Date {
  return new Date();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export function formatDuration(ms: number): string {
  if (ms < 1000) {
    return `${ms}–º—Å`;
  } else if (ms < 60000) {
    return `${(ms / 1000).toFixed(1)}—Å`;
  } else if (ms < 3600000) {
    return `${(ms / 60000).toFixed(1)}–º`;
  } else {
    return `${(ms / 3600000).toFixed(1)}—á`;
  }
}

