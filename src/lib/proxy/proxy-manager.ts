// üåê PROXY MANAGER - –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è Puter API
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏

export interface ProxyServer {
  host: string;
  port: number;
  protocol: 'http' | 'https' | 'socks4' | 'socks5';
  country: string;
  speed: number; // 1-10
  uptime: number; // percentage
  lastChecked: Date;
  isWorking: boolean;
}

export interface ProxyConfig {
  enabled: boolean;
  autoRotate: boolean;
  maxRetries: number;
  timeout: number;
  preferredCountries: string[];
}

export class ProxyManager {
  private static instance: ProxyManager;
  private proxies: ProxyServer[] = [];
  private currentProxyIndex: number = 0;
  private config: ProxyConfig;
  private isInitialized: boolean = false;

  private constructor() {
    this.config = {
      enabled: true,
      autoRotate: true,
      maxRetries: 3,
      timeout: 10000,
      preferredCountries: ['US', 'UK', 'DE', 'NL', 'CA']
    };
  }

  public static getInstance(): ProxyManager {
    if (!ProxyManager.instance) {
      ProxyManager.instance = new ProxyManager();
    }
    return ProxyManager.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
   */
  public async initialize(): Promise<void> {
    if (this.isInitialized) return;

    console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Proxy Manager...');
    
    // –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ)
    const freeProxies: Omit<ProxyServer, 'lastChecked' | 'isWorking'>[] = [
      // HTTP –ø—Ä–æ–∫—Å–∏
      { host: '8.210.83.33', port: 80, protocol: 'http', country: 'US', speed: 7, uptime: 85 },
      { host: '47.74.152.29', port: 8888, protocol: 'http', country: 'US', speed: 6, uptime: 80 },
      { host: '47.88.3.19', port: 8080, protocol: 'http', country: 'US', speed: 8, uptime: 90 },
      { host: '47.88.3.19', port: 80, protocol: 'http', country: 'US', speed: 7, uptime: 85 },
      { host: '47.88.3.19', port: 3128, protocol: 'http', country: 'US', speed: 6, uptime: 75 },
      
      // HTTPS –ø—Ä–æ–∫—Å–∏
      { host: '47.74.152.29', port: 443, protocol: 'https', country: 'US', speed: 7, uptime: 85 },
      { host: '8.210.83.33', port: 443, protocol: 'https', country: 'US', speed: 6, uptime: 80 },
      
      // SOCKS5 –ø—Ä–æ–∫—Å–∏
      { host: '47.88.3.19', port: 1080, protocol: 'socks5', country: 'US', speed: 8, uptime: 90 },
      { host: '8.210.83.33', port: 1080, protocol: 'socks5', country: 'US', speed: 7, uptime: 85 },
      
      // –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –ø—Ä–æ–∫—Å–∏
      { host: '185.162.251.76', port: 8080, protocol: 'http', country: 'DE', speed: 6, uptime: 80 },
      { host: '185.162.251.76', port: 3128, protocol: 'http', country: 'DE', speed: 5, uptime: 75 },
      { host: '185.162.251.76', port: 80, protocol: 'http', country: 'DE', speed: 7, uptime: 85 },
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
      { host: '47.74.152.29', port: 80, protocol: 'http', country: 'US', speed: 6, uptime: 80 },
      { host: '47.74.152.29', port: 3128, protocol: 'http', country: 'US', speed: 5, uptime: 75 },
      { host: '47.88.3.19', port: 80, protocol: 'http', country: 'US', speed: 7, uptime: 85 },
      { host: '47.88.3.19', port: 3128, protocol: 'http', country: 'US', speed: 6, uptime: 80 },
      { host: '47.88.3.19', port: 8080, protocol: 'http', country: 'US', speed: 8, uptime: 90 },
      { host: '8.210.83.33', port: 80, protocol: 'http', country: 'US', speed: 7, uptime: 85 },
      { host: '8.210.83.33', port: 3128, protocol: 'http', country: 'US', speed: 6, uptime: 80 },
      { host: '8.210.83.33', port: 8080, protocol: 'http', country: 'US', speed: 7, uptime: 85 },
    ];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
    this.proxies = freeProxies.map(proxy => ({
      ...proxy,
      lastChecked: new Date(),
      isWorking: true
    }));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏
    await this.testProxies();
    
    this.isInitialized = true;
    console.log(`‚úÖ Proxy Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å ${this.getWorkingProxies().length} —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ–∫—Å–∏`);
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
   */
  private async testProxies(): Promise<void> {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏...');
    
    const testPromises = this.proxies.map(async (proxy, index) => {
      try {
        const isWorking = await this.testProxy(proxy);
        this.proxies[index].isWorking = isWorking;
        this.proxies[index].lastChecked = new Date();
        
        if (isWorking) {
          console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ ${proxy.host}:${proxy.port} —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        } else {
          console.log(`‚ùå –ü—Ä–æ–∫—Å–∏ ${proxy.host}:${proxy.port} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        }
      } catch (error) {
        this.proxies[index].isWorking = false;
        this.proxies[index].lastChecked = new Date();
        console.log(`‚ùå –ü—Ä–æ–∫—Å–∏ ${proxy.host}:${proxy.port} –æ—à–∏–±–∫–∞:`, error.message);
      }
    });

    await Promise.allSettled(testPromises);
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
   */
  private async testProxy(proxy: ProxyServer): Promise<boolean> {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const testUrl = 'https://httpbin.org/ip';
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);

      const response = await fetch(testUrl, {
        method: 'GET',
        signal: controller.signal,
        // –í –±—Ä–∞—É–∑–µ—Ä–µ –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏
        // –≠—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–∏
      });

      clearTimeout(timeoutId);
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–∫—Å–∏
   */
  public getWorkingProxy(): ProxyServer | null {
    const workingProxies = this.getWorkingProxies();
    if (workingProxies.length === 0) return null;

    if (this.config.autoRotate) {
      this.currentProxyIndex = (this.currentProxyIndex + 1) % workingProxies.length;
    }

    return workingProxies[this.currentProxyIndex];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏
   */
  public getWorkingProxies(): ProxyServer[] {
    return this.proxies.filter(proxy => proxy.isWorking);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ
   */
  public getProxiesByCountry(country: string): ProxyServer[] {
    return this.getWorkingProxies().filter(proxy => proxy.country === country);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏
   */
  public getBestProxy(): ProxyServer | null {
    const workingProxies = this.getWorkingProxies();
    if (workingProxies.length === 0) return null;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ uptime
    return workingProxies.sort((a, b) => {
      const scoreA = (a.speed * 0.6) + (a.uptime * 0.4);
      const scoreB = (b.speed * 0.6) + (b.uptime * 0.4);
      return scoreB - scoreA;
    })[0];
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è fetch
   */
  public createProxyUrl(proxy: ProxyServer): string {
    return `${proxy.protocol}://${proxy.host}:${proxy.port}`;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
   */
  public async fetchThroughProxy(url: string, options: RequestInit = {}): Promise<Response> {
    if (!this.config.enabled) {
      return fetch(url, options);
    }

    const proxy = this.getBestProxy();
    if (!proxy) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
      return fetch(url, options);
    }

    console.log(`üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: ${proxy.host}:${proxy.port} (${proxy.country})`);

    try {
      // –í –±—Ä–∞—É–∑–µ—Ä–µ –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP –ø—Ä–æ–∫—Å–∏
      // –ù–æ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CORS –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–∏—Å—ã
      const proxyUrl = this.getCorsProxyUrl(url);
      return await fetch(proxyUrl, options);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', error);
      // Fallback –Ω–∞ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      return fetch(url, options);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ CORS –ø—Ä–æ–∫—Å–∏ URL
   */
  private getCorsProxyUrl(originalUrl: string): string {
    // –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö CORS –ø—Ä–æ–∫—Å–∏
    const corsProxies = [
      'https://cors-anywhere.herokuapp.com/',
      'https://api.allorigins.win/raw?url=',
      'https://thingproxy.freeboard.io/fetch/',
      'https://corsproxy.io/?',
    ];

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π CORS –ø—Ä–æ–∫—Å–∏
    const randomProxy = corsProxies[Math.floor(Math.random() * corsProxies.length)];
    return `${randomProxy}${encodeURIComponent(originalUrl)}`;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  public updateConfig(newConfig: Partial<ProxyConfig>): void {
    this.config = { ...this.config, ...newConfig };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  public getStats(): {
    total: number;
    working: number;
    countries: string[];
    avgSpeed: number;
    avgUptime: number;
  } {
    const working = this.getWorkingProxies();
    const countries = [...new Set(working.map(p => p.country))];
    const avgSpeed = working.reduce((sum, p) => sum + p.speed, 0) / working.length || 0;
    const avgUptime = working.reduce((sum, p) => sum + p.uptime, 0) / working.length || 0;

    return {
      total: this.proxies.length,
      working: working.length,
      countries,
      avgSpeed,
      avgUptime
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
   */
  public async refreshProxies(): Promise<void> {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏...');
    await this.testProxies();
  }
}

export default ProxyManager;

